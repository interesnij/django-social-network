# Generated by Django 5.2.1 on 2025-05-17 11:07

import communities.helpers
import django.contrib.postgres.indexes
import django.db.models.deletion
import imagekit.models.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=500, null=True, verbose_name='Описание')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='статус-слоган')),
                ('type', models.CharField(choices=[('CLO', 'Закрытый'), ('PRI', 'Приватный'), ('PUB', 'Открытый'), ('_DELO', 'Открытый удалённый'), ('_DELP', 'Приватный удалённый'), ('_DELC', 'Закрытый удалённый'), ('_BANO', 'Открытый баннер'), ('_BANP', 'Приватный баннер'), ('_BANC', 'Закрытый баннер'), ('_SUSO', 'Открытый замороженный'), ('_SUSP', 'Приватный замороженный'), ('_SUSC', 'Закрытый замороженный'), ('_BLOO', 'Открытый блокнутый'), ('_BLOP', 'Приватный блокнутый'), ('_BLOC', 'Закрытый блокнутый')], max_length=5)),
                ('perm', models.CharField(choices=[('CH', 'Детская'), ('ST', 'Обычные права'), ('VS', 'Запрос на проверку'), ('VE', 'Провернный')], default='ST', max_length=5, verbose_name='Уровень доступа')),
                ('have_link', models.CharField(blank=True, max_length=17, verbose_name='Ссылка')),
                ('s_avatar', models.ImageField(blank=True, upload_to=communities.helpers.upload_to_community_avatar_directory)),
                ('b_avatar', models.ImageField(blank=True, upload_to=communities.helpers.upload_to_community_avatar_directory)),
                ('cover', imagekit.models.fields.ProcessedImageField(blank=True, upload_to=communities.helpers.upload_to_community_cover_directory)),
                ('level', models.PositiveSmallIntegerField(default=100, verbose_name='Порядочность')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_communities', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'сообщество',
                'verbose_name_plural': 'сообщества',
            },
        ),
        migrations.CreateModel(
            name='CommunityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('avatar', models.ImageField(blank=True, upload_to='', verbose_name='Аватар')),
                ('order', models.IntegerField(default=0, verbose_name='Номер')),
            ],
            options={
                'verbose_name': 'Категория сообществ',
                'verbose_name_plural': 'Категории сообществ',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='CommunityDocsListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка документов',
                'verbose_name_plural': 'Порядки отображения списков документов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunityGoodListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка товаров',
                'verbose_name_plural': 'Порядки отображения списков товаров',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunityPhotoListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения фотоальбома',
                'verbose_name_plural': 'Порядки отображения фотоальбомов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunityPlayListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения плейлиста',
                'verbose_name_plural': 'Порядки отображения плейлистов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunityPostsListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка записей',
                'verbose_name_plural': 'Порядки отображения списков записей',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunitySurveyListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка опросов',
                'verbose_name_plural': 'Порядки отображения списков опросов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunityVideoListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения видеольбома',
                'verbose_name_plural': 'Порядки отображения видеоальбомов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='CommunityNotificationsGood',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_notifications_good', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к товару')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к товару')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост товара')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к товару')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к товару')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к товару')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к товару')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к товару')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к товару')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityNotificationsMusic',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_notifications_music', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост аудиозаписи')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityNotificationsPhoto',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_notifications_photo', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к фото')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к фото')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост фото')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к фото')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к фото')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к фото')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к фото')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к фото')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к фото')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityNotificationsPost',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_notifications_post', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к записи')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к записи')),
                ('mention', models.BooleanField(default=True, verbose_name='Упоминание в записи')),
                ('comment_mention', models.BooleanField(default=True, verbose_name='Упоминание в комментарии к записи')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост записи')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к записи')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к записи')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к записи')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к записи')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityNotificationsVideo',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_notifications_video', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к ролику')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к ролику')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост ролика')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к ролику')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к ролику')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к ролику')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к ролику')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к ролику')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к ролику')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityPrivate2',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_private2', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('can_see_member', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто видит друзей')),
                ('can_see_info', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто видит информацию')),
                ('can_send_message', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто пишет сообщения')),
                ('can_see_post', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто видит стену')),
                ('can_see_photo', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто пишет сообщения')),
                ('can_see_good', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто пишет сообщения')),
                ('can_see_video', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто пишет сообщения')),
                ('can_see_music', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто пишет сообщения')),
                ('can_see_planner', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто видит раздел планирования')),
                ('can_see_doc', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто видит документы')),
                ('can_see_settings', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=3, verbose_name='Кто видит настройки')),
                ('can_see_log', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=3, verbose_name='Кто видит логи')),
                ('can_see_stat', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=3, verbose_name='Кто видит статистику')),
                ('can_see_survey', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (2, 'Подписчики'), (3, 'Создатель'), (5, 'Подписчики, кроме'), (6, 'Некоторые подписчики'), (4, 'Персонал')], default=1, verbose_name='Кто видит опросы')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_administrator', models.BooleanField(default=False, verbose_name='Это администратор')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='Это модератор')),
                ('is_editor', models.BooleanField(default=False, verbose_name='Это редактор')),
                ('is_advertiser', models.BooleanField(default=False, verbose_name='Это рекламодатель')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('visited', models.PositiveIntegerField(default=0, verbose_name='Количество визитов')),
                ('community', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='communities.community', verbose_name='Сообщество')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='communities_memberships', to=settings.AUTH_USER_MODEL, verbose_name='Члены сообщества')),
            ],
            options={
                'verbose_name': 'подписчик сообщества',
                'verbose_name_plural': 'подписчики сообщества',
                'ordering': ['-visited'],
            },
        ),
        migrations.CreateModel(
            name='CommunityMemberPerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_see_info', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит информацию профиля')),
                ('can_see_member', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит подписчиков')),
                ('can_send_message', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто пишет сообщения')),
                ('can_see_doc', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит документы и списки')),
                ('can_see_music', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит музыку и списки')),
                ('can_see_survey', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит опросы')),
                ('can_see_post', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит записи и списки')),
                ('can_see_post_comment', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит комменты к записям')),
                ('can_see_photo', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит фото и списки')),
                ('can_see_photo_comment', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит комменты к фото')),
                ('can_see_good', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит товары и списки')),
                ('can_see_good_comment', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит комменты к товарам')),
                ('can_see_video', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит видео и списки')),
                ('can_see_video_comment', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит комменты к видео')),
                ('can_see_planner', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит рабочие пространства и доски')),
                ('can_see_planner_comment', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто видит комменты к доскам')),
                ('can_add_post', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует записи и списки')),
                ('can_add_photo', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует фото и списки')),
                ('can_add_good', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует товары и списки')),
                ('can_add_video', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует видео и списки')),
                ('can_add_planner', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует рабочие пространства и доски')),
                ('can_add_doc', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует документы и списки')),
                ('can_add_music', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто копирует музыку и списки')),
                ('can_create_post', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает записи, работает с ними')),
                ('can_create_photo', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает фото, работает с ними')),
                ('can_create_good', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает товары, работает с ними')),
                ('can_create_video', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает видео, работает с ними')),
                ('can_create_planner', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает доски, работает с ними')),
                ('can_create_doc', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает документы, работает с ними')),
                ('can_create_music', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает музыку, работает с ними')),
                ('can_create_survey', models.PositiveSmallIntegerField(choices=[(0, 'Не активно'), (1, 'Может иметь действия с элементом'), (2, 'Не может иметь действия с элементом')], default=0, verbose_name='Кто создает опросы, работает с ними')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='community_ie_settings', to='communities.communitymembership', verbose_name='Подписчик сообщества')),
            ],
            options={
                'verbose_name': 'Исключения/Включения подписчика',
                'verbose_name_plural': 'Исключения/Включения подписчиков',
            },
        ),
        migrations.CreateModel(
            name='CommunitySubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('avatar', models.ImageField(blank=True, upload_to='', verbose_name='Аватар')),
                ('order', models.IntegerField(default=0, verbose_name='Номер')),
                ('sudcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_categories', to='communities.communitycategory', verbose_name='Категория сообщества')),
            ],
            options={
                'verbose_name': 'Подкатегория сообществ',
                'verbose_name_plural': 'Подкатегории сообществ',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='community',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='communities.communitysubcategory', verbose_name='Подкатегория сообщества'),
        ),
        migrations.CreateModel(
            name='CommunityInfo',
            fields=[
                ('community', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='community_info', serialize=False, to='communities.community', verbose_name='Сообщество')),
                ('posts', models.PositiveIntegerField(default=0, verbose_name='Кол-во постов')),
                ('views_post', models.PositiveIntegerField(default=0, verbose_name='Кол-во просмотров постов')),
                ('members', models.PositiveIntegerField(default=0, verbose_name='Кол-во участников')),
                ('photos', models.PositiveIntegerField(default=0, verbose_name='Кол-во фотографий')),
                ('goods', models.PositiveIntegerField(default=0, verbose_name='Кол-во товаров')),
                ('tracks', models.PositiveIntegerField(default=0, verbose_name='Кол-во аудиозаписей')),
                ('videos', models.PositiveIntegerField(default=0, verbose_name='Кол-во видеозаписей')),
                ('docs', models.PositiveIntegerField(default=0, verbose_name='Кол-во документов')),
                ('articles', models.PositiveIntegerField(default=0, verbose_name='Кол-во статей')),
                ('banned_users', models.ManyToManyField(blank=True, related_name='banned_of_communities', to=settings.AUTH_USER_MODEL, verbose_name='Черный список')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user'], name='communities_communi_f9047f_idx'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user', 'is_administrator'], name='communities_communi_b6abad_idx'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user', 'is_moderator'], name='communities_communi_91a862_idx'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user', 'is_editor'], name='communities_communi_5976b6_idx'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user', 'is_advertiser'], name='communities_communi_029e1f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='communitymembership',
            unique_together={('user', 'community')},
        ),
        migrations.AddIndex(
            model_name='community',
            index=django.contrib.postgres.indexes.BrinIndex(fields=['created'], name='communities_created_2903f5_brin'),
        ),
    ]
