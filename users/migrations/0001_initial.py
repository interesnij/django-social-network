# Generated by Django 3.2 on 2021-04-29 19:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.helpers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_activity', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Активность')),
                ('phone', models.CharField(max_length=17, unique=True, verbose_name='Телефон')),
                ('type', models.CharField(choices=[('CHI', 'Ребенок'), ('TPV', 'Телефон не подтвержден'), ('STA', 'Обычные права'), ('VES', 'Запрос на проверку'), ('VER', 'Проверенный'), ('IDS', 'Запрос на идентификацию'), ('IDE', 'Идентифицированный'), ('MAN', 'Менеджер'), ('SUP', 'Суперменеджер'), ('TDELC', 'Удален ребенок'), ('TDELS', 'Удален'), ('TDELVS', 'Удален подавший на верификацию'), ('TDELV', 'Удален верифицированный'), ('TDELIS', 'Удален подавший на идентификацию'), ('TDELI', 'Удален идентифиированный'), ('TDELM', 'Удален менеджер'), ('TCLOC', 'Закрыт ребенок'), ('TCLOS', 'Закрыт'), ('TCLOVS', 'Удален подавший на верификацию'), ('TCLOV', 'Закрыт верифицированный'), ('TCLOIS', 'Закрыт подавший на идентификацию'), ('TCLOI', 'Закрыт идентифиированный'), ('TCLOM', 'Закрыт менеджер'), ('TSUSC', 'Заморожен ребенок'), ('TSUSS', 'Заморожен'), ('TSUSVS', 'Заморожен подавший на верификацию'), ('TSUSV', 'Заморожен верифицированный'), ('TSUSIS', 'Заморожен подавший на идентификацию'), ('TSUSI', 'Заморожен идентифиированный'), ('TSUSM', 'Заморожен менеджер'), ('TBANC', 'Баннер ребенок'), ('TBANS', 'Баннер'), ('TBANVS', 'Баннер подавший на верификацию'), ('TBANV', 'Баннер верифицированный'), ('TBANIS', 'Баннер подавший на идентификацию'), ('TBANI', 'Баннер идентифиированный'), ('TBANM', 'Баннер менеджер'), ('TBLOC', 'Блокнут ребенок'), ('TBLOS', 'Блокнут'), ('TBLOVS', 'Блокнут подавший на верификацию'), ('TBLOV', 'Блокнут верифицированный'), ('TBLOIS', 'Блокнут подавший на идентификацию'), ('TBLOI', 'Блокнут идентифиированный'), ('TBLOM', 'Блокнут менеджер')], default='TPV', max_length=6, verbose_name='Уровень доступа')),
                ('device', models.CharField(blank=True, choices=[('De', 'Комп'), ('Ph', 'Телефон')], max_length=5, verbose_name='Оборудование')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('b_avatar', models.ImageField(blank=True, upload_to=users.helpers.upload_to_user_directory)),
                ('s_avatar', models.ImageField(blank=True, upload_to=users.helpers.upload_to_user_directory)),
                ('have_link', models.CharField(blank=True, max_length=17, verbose_name='Ссылка')),
                ('sity', models.CharField(blank=True, max_length=64, verbose_name='Местоположение')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='статус-слоган')),
                ('gender', models.CharField(blank=True, choices=[('Man', 'Мужской'), ('Fem', 'Женский')], max_length=5, verbose_name='Пол')),
                ('language', models.CharField(choices=[('ru', 'Russian'), ('en', 'English')], default='ru', max_length=7)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserDeleted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('answer', models.CharField(choices=[('Pa', 'У меня есть другая страница'), ('Ti', 'Соцсеть отнимает много времени'), ('Fr', 'Мало свободы самовыражения'), ('Sa', 'Соцсеть плохо защищает данные'), ('Ch', 'Соцсеть плохо защищает детей'), ('Ot', 'Другая причина')], default='Ot', max_length=5, verbose_name='Причины удаления страницы')),
                ('other', models.CharField(max_length=200, verbose_name='Свой вариант ответа')),
            ],
            options={
                'verbose_name': 'Причина удаления страницы',
                'verbose_name_plural': 'Причины удаления страницы',
            },
        ),
        migrations.CreateModel(
            name='UserFeaturedFriend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('featured_user', models.PositiveIntegerField(default=0, verbose_name='Рекомендуемый друг')),
            ],
            options={
                'verbose_name': 'Рекомендованные друзья',
                'verbose_name_plural': 'Рекомендованные друзья',
            },
        ),
        migrations.CreateModel(
            name='UserPopulateCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Сообщество')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Количество визитов')),
            ],
            options={
                'verbose_name': 'Популярность сообществ',
                'verbose_name_plural': 'Популярность сообществ',
                'ordering': ['-count'],
            },
        ),
        migrations.CreateModel(
            name='UserPopulateFriend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('friend', models.PositiveIntegerField(default=0, verbose_name='Друг')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Количество визитов')),
            ],
            options={
                'verbose_name': 'Популярность друзей',
                'verbose_name_plural': 'Популярность друзей',
                'ordering': ['-count'],
            },
        ),
        migrations.CreateModel(
            name='UserColorSettings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='color_settings', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('color', models.CharField(choices=[('white', 'white'), ('blue', 'blue'), ('brown', 'brown'), ('dark-blue', 'dark-blue'), ('dark-brown', 'dark-brown'), ('dark-green', 'dark-green'), ('dark-grey', 'dark-grey'), ('dark-maroon', 'dark-maroon'), ('dark-pink', 'dark-pink'), ('dark-purple', 'dark-purple'), ('grey', 'grey'), ('orange', 'orange'), ('purple', 'purple'), ('red', 'red'), ('skyblue', 'skyblue'), ('teal', 'teal')], default='white', max_length=20, verbose_name='Цвет')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotifications',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_notify', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('connection_request', models.BooleanField(default=True, verbose_name='Заявка в друзья')),
                ('connection_confirmed', models.BooleanField(default=True, verbose_name='Заявка принята')),
                ('community_invite', models.BooleanField(default=True, verbose_name='Приглашение в сообщество')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsGood',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_good_notify', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к товару')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к товару')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост товара')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к товару')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к товару')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к товару')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к товару')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsMusic',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_music_notify', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост аудиозаписи')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsPhoto',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_photo_notify', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к фото')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к фото')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост фото')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к фото')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к фото')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к фото')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к фото')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsPost',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_post_notify', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к записи')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к записи')),
                ('mention', models.BooleanField(default=True, verbose_name='Упоминание в записи')),
                ('comment_mention', models.BooleanField(default=True, verbose_name='Упоминание в комментарии к записи')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост записи')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к записи')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к записи')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к записи')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к записи')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsVideo',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_video_notify', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к видео')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к видео')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост видео')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к видео')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к видео')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайках на комментарий к видео')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к видео')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivate',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_private', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('community', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит сообщества')),
                ('friends', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит друзей')),
                ('message', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто пишет сообщения')),
                ('is_private', models.BooleanField(default=False, verbose_name='Закрытый профиль')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivateGood',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_private_good', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('good', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет товары')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит товары')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivateMusic',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_private_music', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('music', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет аудиозаписи')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит видеозаписи')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivatePhoto',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_private_photo', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('photo', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет фотографии')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит фотографии')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivatePost',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_private_post', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('wall', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет записи')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит стену')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivateVideo',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_private_video', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('video', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет видеозаписи')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит видеозаписи')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('activity', models.TextField(blank=True, max_length=1000, verbose_name='Деятельность')),
                ('interests', models.TextField(blank=True, max_length=1000, verbose_name='Интересы')),
                ('favorite_music', models.TextField(blank=True, max_length=1000, verbose_name='Любимая музыка')),
                ('favorite_films', models.TextField(blank=True, max_length=1000, verbose_name='Любимые фильмы')),
                ('favorite_books', models.TextField(blank=True, max_length=1000, verbose_name='Любимые книги')),
                ('favorite_game', models.TextField(blank=True, max_length=1000, verbose_name='Любимые игры')),
                ('favorite_quotes', models.TextField(blank=True, max_length=1000, verbose_name='Любимые цитаты')),
                ('about', models.TextField(blank=True, max_length=1000, verbose_name='О себе')),
                ('posts', models.PositiveIntegerField(default=0, verbose_name='Кол-во постов')),
                ('views_post', models.PositiveIntegerField(default=0, verbose_name='Кол-во просмотров постов')),
                ('friends', models.PositiveIntegerField(default=0, verbose_name='Кол-во друзей')),
                ('follows', models.PositiveIntegerField(default=0, verbose_name='Кол-во подписчиков')),
                ('communities', models.PositiveIntegerField(default=0, verbose_name='Кол-во групп')),
                ('photos', models.PositiveIntegerField(default=0, verbose_name='Кол-во фотографий')),
                ('goods', models.PositiveIntegerField(default=0, verbose_name='Кол-во товаров')),
                ('traks', models.PositiveIntegerField(default=0, verbose_name='Кол-во аудиозаписей')),
                ('videos', models.PositiveIntegerField(default=0, verbose_name='Кол-во видеозаписей')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserProfileAnketa',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_profile_anketa', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('political_preferences', models.CharField(blank=True, choices=[('Не выбраны', 'Не выбраны'), ('Индиффирентные', 'Индиффирентные'), ('Коммунистические', 'Коммунистические'), ('Социалистические', 'Социалистические'), ('Умеренные', 'Умеренные'), ('Либеральные', 'Либеральные'), ('Консервативные', 'Консервативные'), ('Либералистические', 'Либералистические'), ('Ультраконсервативные', 'Ультраконсервативные')], max_length=50, verbose_name='Полит. предпочтения')),
                ('worldview', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Иудаизм', 'Иудаизм'), ('Православие', 'Православие'), ('Католицизм', 'Католицизм'), ('Протестантизм', 'Протестантизм'), ('Ислам', 'Ислам'), ('Буддизм', 'Буддизм'), ('Конфуцианство', 'Конфуцианство'), ('Светский гуманизм', 'Светский гуманизм'), ('Пастафарианство', 'Пастафарианство')], max_length=50, verbose_name='Мировоззрение')),
                ('mainthing_in_life', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Семья и дети', 'Семья и дети'), ('Карьера и деньги', 'Карьера и деньги'), ('Развлечение и отдых', 'Развлечение и отдых'), ('Наука и исследования', 'Наука и исследования'), ('Совершенствование мира', 'Совершенствование мира'), ('Саморазвитие', 'Саморазвитие'), ('Красота и искусство', 'Красота и искусство'), ('Слава и влияние', 'Слава и влияние')], max_length=50, verbose_name='Главное в жизни')),
                ('mainthing_in_people', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Ум и креативность', 'Ум и креативность'), ('Доброта и честность', 'Доброта и честность'), ('Красота и здоровье', 'Красота и здоровье'), ('Власть и богатство', 'Власть и богатство'), ('Смелость и упорство', 'Смелость и упорство'), ('Юмор и жизнелюбие', 'Юмор и жизнелюбие')], max_length=50, verbose_name='Главное в людях')),
                ('attitude_to_smoking', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Резко негативное', 'Резко негативное'), ('Негативное', 'ДНегативное'), ('Компромиссное', 'Компромиссное'), ('Помогу бросить курить', 'Помогу бросить курить')], max_length=50, verbose_name='Отношение к курению')),
                ('attitude_to_alcohol', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Резко негативное', 'Резко негативное'), ('Негативное', 'ДНегативное'), ('Компромиссное', 'Компромиссное'), ('Помогу бросить пить', 'Помогу бросить пить')], max_length=50, verbose_name='Отношение к алкоголю')),
                ('inspiration', models.CharField(max_length=200, verbose_name='Что меня вдохновляет')),
            ],
            options={
                'verbose_name': 'Анкета',
                'verbose_name_plural': 'Анкеты',
            },
        ),
        migrations.CreateModel(
            name='UserBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked_user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL, verbose_name='Кого блокирует')),
                ('blocker', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_blocks', to=settings.AUTH_USER_MODEL, verbose_name='Кто блокирует')),
            ],
        ),
        migrations.CreateModel(
            name='IPUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ip', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'ip пользователя',
                'verbose_name_plural': 'ip пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserProfileFamily',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_family', serialize=False, to='users.user', verbose_name='Пользователь')),
                ('male_status', models.CharField(choices=[('NV', 'Не выбрано'), ('NM', 'Не женат'), ('MF', 'Есть подруга'), ('EN', 'Помолвлен'), ('MA', 'Женат'), ('CM', 'В гражданском браке'), ('LO', 'Влюблён'), ('DI', 'Всё сложно'), ('AS', 'В активном поиске')], default='NV', max_length=5, verbose_name='Статус мужчины')),
                ('female_status', models.CharField(choices=[('NV', 'Не выбрано'), ('NM', 'Не замужем'), ('MF', 'Есть друг'), ('EN', 'Помолвлена'), ('MA', 'Замужем'), ('CM', 'В гражданском браке'), ('LO', 'Влюблёна'), ('DI', 'Всё сложно'), ('AS', 'В активном поиске')], default='NV', max_length=5, verbose_name='Статус женщины')),
                ('brother_sister', models.ManyToManyField(blank=True, related_name='user_profile_bro', to=settings.AUTH_USER_MODEL, verbose_name='Братья, сёстры')),
                ('children', models.ManyToManyField(blank=True, related_name='user_profile_chilren', to=settings.AUTH_USER_MODEL, verbose_name='Дети')),
                ('dad', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_dad', to=settings.AUTH_USER_MODEL, verbose_name='Папа')),
                ('grandsons', models.ManyToManyField(blank=True, related_name='user_profile_grandsons', to=settings.AUTH_USER_MODEL, verbose_name='Внуки')),
                ('mom', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_mom', to=settings.AUTH_USER_MODEL, verbose_name='Мама')),
                ('partner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_partner', to=settings.AUTH_USER_MODEL, verbose_name='Муж/Жена')),
            ],
            options={
                'verbose_name': 'Семья пользователя',
                'verbose_name_plural': 'Семьи пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, null=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, null=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_location', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Местоположение 1',
                'verbose_name_plural': 'Местоположения 1',
                'index_together': {('id', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='userblock',
            index=models.Index(fields=['blocked_user', 'blocker'], name='users_userb_blocked_ab1a4e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userblock',
            unique_together={('blocked_user', 'blocker')},
        ),
        migrations.AlterIndexTogether(
            name='ipuser',
            index_together={('id', 'user')},
        ),
    ]
