# Generated by Django 5.2.1 on 2025-05-17 11:07

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.helpers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_activity', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Активность')),
                ('phone', models.CharField(max_length=17, unique=True, verbose_name='Телефон')),
                ('type', models.CharField(choices=[('CHI', 'Ребенок'), ('CHIP', 'Ребенок прив'), ('STA', 'Обычные права'), ('STAP', 'Обычный прив'), ('VES', 'Запрос на проверку'), ('VESP', 'Запрос на проверку прив'), ('VER', 'Проверенный'), ('VERP', 'Проверенный прив'), ('IDS', 'Запрос на ид'), ('IDSP', 'Запрос на ид прив'), ('IDE', 'Ид'), ('IDEP', 'Ид прив'), ('_DELC', 'Удал ребенок'), ('_DELCP', 'Удал ребенок прив'), ('_DELS', 'Удал'), ('_DELSP', 'Удал прив'), ('_DELVS', 'Удал подавший на вер'), ('_DELVSP', 'Удал подавший на вер прив'), ('_DELV', 'Удал вер'), ('_DELVP', 'Удал вер прив'), ('_DELIS', 'Удал подавший на ид'), ('_DELISP', 'Удал подавший на ид прив'), ('_DELI', 'Удал ид'), ('_DELIP', 'Удал ид прив'), ('_CLOC', 'Закр ребенок'), ('_CLOCP', 'Закр ребенок прив'), ('_CLOS', 'Закр'), ('_CLOSP', 'Закр прив'), ('_CLOVS', 'Удал подавший на вер'), ('_CLOVSP', 'Удал подавший на вер прив'), ('_CLOV', 'Закр вер'), ('_CLOVP', 'Закр вер прив'), ('_CLOIS', 'Зак подавший на ид'), ('_CLOISP', 'Закр подавший на ид прив'), ('_CLOI', 'Закр ид'), ('_CLOIP', 'Закр ид прив'), ('_SUSC', 'Зам ребенок'), ('_SUSCP', 'Зам ребенок прив'), ('_SUSS', 'Зам'), ('_SUSSP', 'Зам прив'), ('_SUSVS', 'Зам подавший на вер'), ('_SUSVSP', 'Зам подавший на вер прив'), ('_SUSV', 'Зам вер'), ('_SUSVP', 'Зам вер прив'), ('_SUSIS', 'Зам подавший на ид'), ('_SUSISP', 'Зам подавший на ид прив'), ('_SUSI', 'Зам ид'), ('_SUSIP', 'Зам ид прив'), ('_BANC', 'Бан ребенок'), ('_BANCP', 'Бан ребенок прив'), ('_BANS', 'Бан'), ('_BANSP', 'Бан прив'), ('_BANVS', 'Бан подавший на вер'), ('_BANVSP', 'Бан подавший на вер прив'), ('_BANV', 'Бан вер'), ('_BANVP', 'Бан вер прив'), ('_BANIS', 'Бан подавший на ид'), ('_BANISP', 'Бан подавший на ид прив'), ('_BANI', 'Бан ид'), ('_BANIP', 'Бан ид прив')], default=1, max_length=8, verbose_name='Уровень доступа')),
                ('gender', models.CharField(blank=True, choices=[('Man', 'Мужской'), ('Fem', 'Женский')], max_length=5, verbose_name='Пол')),
                ('device', models.CharField(blank=True, choices=[('De', 'Комп'), ('Ph', 'Телефон')], max_length=5, verbose_name='Оборудование')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('b_avatar', models.ImageField(blank=True, upload_to=users.helpers.upload_to_user_directory)),
                ('s_avatar', models.ImageField(blank=True, upload_to=users.helpers.upload_to_user_directory)),
                ('have_link', models.CharField(blank=True, max_length=17, verbose_name='Ссылка')),
                ('sity', models.CharField(blank=True, max_length=64, verbose_name='Местоположение')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='статус-слоган')),
                ('language', models.CharField(choices=[('ru', 'Russian'), ('en', 'English')], default='ru', max_length=7)),
                ('perm', models.PositiveSmallIntegerField(choices=[(1, 'Обычные права'), (10, 'Модератор-стажер'), (13, 'Модератор'), (16, 'Старший модератор'), (19, 'Модератор-тимлид'), (30, 'Менеджер-стажер'), (33, 'Менеджер'), (36, 'Старший менеджер'), (39, 'Менеджер-тимлид'), (40, 'Менеджер рекламы'), (44, 'Старший менеджер рекламы'), (49, 'Менеджер-тимлид рекламы'), (50, 'Администратор'), (54, 'Старший администратор'), (59, 'Администратор-тимлид'), (60, 'Суперменеджер')], default=1, verbose_name='Статус пользователя')),
                ('level', models.PositiveSmallIntegerField(default=100, verbose_name='Порядочность')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ListUC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Основной список'), (2, 'Пользовательский'), (0, 'Нет значения')], default=0, verbose_name='Тип списка')),
                ('name', models.CharField(max_length=100)),
                ('owner', models.PositiveIntegerField(default=0, verbose_name='Владелец')),
            ],
        ),
        migrations.CreateModel(
            name='UserDeleted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('answer', models.CharField(choices=[('Pa', 'У меня есть другая страница'), ('Ti', 'Соцсеть отнимает много времени'), ('Fr', 'Мало свободы самовыражения'), ('Sa', 'Соцсеть плохо защищает данные'), ('Ch', 'Соцсеть плохо защищает детей'), ('Ot', 'Другая причина')], default='Ot', max_length=5, verbose_name='Причины удаления страницы')),
                ('other', models.CharField(max_length=200, verbose_name='Свой вариант ответа')),
            ],
            options={
                'verbose_name': 'Причина удаления страницы',
                'verbose_name_plural': 'Причины удаления страницы',
            },
        ),
        migrations.CreateModel(
            name='UserDocsListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка документов',
                'verbose_name_plural': 'Порядки отображения списков документов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='UserGoodListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка товаров',
                'verbose_name_plural': 'Порядки отображения списков товаров',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='UserPhotoListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения фотоальбома',
                'verbose_name_plural': 'Порядки отображения фотоальбомов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='UserPlayListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения плейлиста',
                'verbose_name_plural': 'Порядки отображения плейлистов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='UserPostsListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка записей',
                'verbose_name_plural': 'Порядки отображения списков записей',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='UserSurveyListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения списка опросов',
                'verbose_name_plural': 'Порядки отображения списков опросов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='UserVideoListPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('list', models.PositiveIntegerField(default=0, verbose_name='Фотоальбом')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.PositiveSmallIntegerField(default=1, verbose_name='1 - открыт, 0 - недоступен')),
            ],
            options={
                'verbose_name': 'Порядок отображения видеольбома',
                'verbose_name_plural': 'Порядки отображения видеоальбомов',
                'ordering': ['-position'],
            },
        ),
        migrations.CreateModel(
            name='ProfilePrivate',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile_private', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('can_see_community', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит сообщества')),
                ('can_see_info', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит информацию')),
                ('can_see_friend', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит друзей')),
                ('can_send_message', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто пишет сообщения')),
                ('can_add_in_chat', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто приглашает в беседы')),
                ('can_see_post', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит записи')),
                ('can_see_photo', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит фотографии')),
                ('can_see_good', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит товары')),
                ('can_see_video', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит видеозаписи')),
                ('can_see_music', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит аудиозаписи')),
                ('can_see_planner', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=5, verbose_name='Кто видит раздел планирования')),
                ('can_see_doc', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит документы')),
                ('can_see_survey', models.PositiveSmallIntegerField(choices=[(1, 'Все пользователи'), (4, 'Друзья'), (5, 'Друзья и друзья друзей'), (6, 'Только я'), (17, 'Друзья, кроме'), (18, 'Некоторые друзья')], default=1, verbose_name='Кто видит опросы')),
            ],
        ),
        migrations.CreateModel(
            name='UserColorSettings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='color_settings', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('color', models.CharField(choices=[('white', 'white'), ('blue', 'blue'), ('brown', 'brown'), ('dark-blue', 'dark-blue'), ('dark-brown', 'dark-brown'), ('dark-green', 'dark-green'), ('dark-grey', 'dark-grey'), ('dark-maroon', 'dark-maroon'), ('dark-pink', 'dark-pink'), ('dark-purple', 'dark-purple'), ('grey', 'grey'), ('orange', 'orange'), ('purple', 'purple'), ('red', 'red'), ('skyblue', 'skyblue'), ('teal', 'teal')], default='white', max_length=20, verbose_name='Цвет')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotifications',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_notify', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('connection_request', models.BooleanField(default=True, verbose_name='Заявка в друзья')),
                ('connection_confirmed', models.BooleanField(default=True, verbose_name='Заявка принята')),
                ('community_invite', models.BooleanField(default=True, verbose_name='Приглашение в сообщество')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsGood',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_good_notify', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к товару')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к товару')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост товара')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к товару')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к товару')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к товару')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к товару')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsMusic',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_music_notify', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост аудиозаписи')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsPhoto',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_photo_notify', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к фото')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к фото')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост фото')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к фото')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к фото')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к фото')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к фото')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsPost',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_post_notify', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к записи')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к записи')),
                ('mention', models.BooleanField(default=True, verbose_name='Упоминание в записи')),
                ('comment_mention', models.BooleanField(default=True, verbose_name='Упоминание в комментарии к записи')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост записи')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к записи')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к записи')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к записи')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к записи')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsVideo',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_video_notify', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к видео')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к видео')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост видео')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к видео')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к видео')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайках на комментарий к видео')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к видео')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('activity', models.TextField(blank=True, max_length=5000, verbose_name='Деятельность')),
                ('interests', models.TextField(blank=True, max_length=5000, verbose_name='Интересы')),
                ('favorite_music', models.TextField(blank=True, max_length=5000, verbose_name='Любимая музыка')),
                ('favorite_films', models.TextField(blank=True, max_length=5000, verbose_name='Любимые фильмы')),
                ('favorite_books', models.TextField(blank=True, max_length=5000, verbose_name='Любимые книги')),
                ('favorite_game', models.TextField(blank=True, max_length=5000, verbose_name='Любимые игры')),
                ('favorite_quotes', models.TextField(blank=True, max_length=5000, verbose_name='Любимые цитаты')),
                ('about', models.TextField(blank=True, max_length=5000, verbose_name='О себе')),
                ('posts', models.PositiveIntegerField(default=0, verbose_name='Кол-во постов')),
                ('views_post', models.PositiveIntegerField(default=0, verbose_name='Кол-во просмотров постов')),
                ('friends', models.PositiveIntegerField(default=0, verbose_name='Кол-во друзей')),
                ('follows', models.PositiveIntegerField(default=0, verbose_name='Кол-во подписчиков')),
                ('communities', models.PositiveIntegerField(default=0, verbose_name='Кол-во групп')),
                ('photos', models.PositiveIntegerField(default=0, verbose_name='Кол-во фотографий')),
                ('goods', models.PositiveIntegerField(default=0, verbose_name='Кол-во товаров')),
                ('docs', models.PositiveIntegerField(default=0, verbose_name='Кол-во документов')),
                ('tracks', models.PositiveIntegerField(default=0, verbose_name='Кол-во аудиозаписей')),
                ('videos', models.PositiveIntegerField(default=0, verbose_name='Кол-во видеозаписей')),
                ('articles', models.PositiveIntegerField(default=0, verbose_name='Кол-во статей')),
                ('time', models.DurationField(default=datetime.timedelta(0), verbose_name='Общее проведенное время')),
                ('height', models.FloatField(default=0, verbose_name='Общая высота в метрах')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserProfileAnketa',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_profile_anketa', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('political_preferences', models.CharField(blank=True, choices=[('Не выбраны', 'Не выбраны'), ('Индиффирентные', 'Индиффирентные'), ('Коммунистические', 'Коммунистические'), ('Социалистические', 'Социалистические'), ('Умеренные', 'Умеренные'), ('Либеральные', 'Либеральные'), ('Консервативные', 'Консервативные'), ('Либералистические', 'Либералистические'), ('Ультраконсервативные', 'Ультраконсервативные')], max_length=50, verbose_name='Полит. предпочтения')),
                ('worldview', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Иудаизм', 'Иудаизм'), ('Православие', 'Православие'), ('Католицизм', 'Католицизм'), ('Протестантизм', 'Протестантизм'), ('Ислам', 'Ислам'), ('Буддизм', 'Буддизм'), ('Конфуцианство', 'Конфуцианство'), ('Светский гуманизм', 'Светский гуманизм'), ('Пастафарианство', 'Пастафарианство')], max_length=50, verbose_name='Мировоззрение')),
                ('mainthing_in_life', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Семья и дети', 'Семья и дети'), ('Карьера и деньги', 'Карьера и деньги'), ('Развлечение и отдых', 'Развлечение и отдых'), ('Наука и исследования', 'Наука и исследования'), ('Совершенствование мира', 'Совершенствование мира'), ('Саморазвитие', 'Саморазвитие'), ('Красота и искусство', 'Красота и искусство'), ('Слава и влияние', 'Слава и влияние')], max_length=50, verbose_name='Главное в жизни')),
                ('mainthing_in_people', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Ум и креативность', 'Ум и креативность'), ('Доброта и честность', 'Доброта и честность'), ('Красота и здоровье', 'Красота и здоровье'), ('Власть и богатство', 'Власть и богатство'), ('Смелость и упорство', 'Смелость и упорство'), ('Юмор и жизнелюбие', 'Юмор и жизнелюбие')], max_length=50, verbose_name='Главное в людях')),
                ('attitude_to_smoking', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Резко негативное', 'Резко негативное'), ('Негативное', 'ДНегативное'), ('Компромиссное', 'Компромиссное'), ('Помогу бросить курить', 'Помогу бросить курить')], max_length=50, verbose_name='Отношение к курению')),
                ('attitude_to_alcohol', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Резко негативное', 'Резко негативное'), ('Негативное', 'ДНегативное'), ('Компромиссное', 'Компромиссное'), ('Помогу бросить пить', 'Помогу бросить пить')], max_length=50, verbose_name='Отношение к алкоголю')),
                ('inspiration', models.CharField(max_length=200, verbose_name='Что меня вдохновляет')),
            ],
            options={
                'verbose_name': 'Анкета',
                'verbose_name_plural': 'Анкеты',
            },
        ),
        migrations.CreateModel(
            name='IPUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ip', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'ip пользователя',
                'verbose_name_plural': 'ip пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, null=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, null=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_location', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Местоположение 1',
                'verbose_name_plural': 'Местоположения 1',
            },
        ),
        migrations.CreateModel(
            name='UserProfileFamily',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_family', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('male_status', models.CharField(choices=[('NV', 'Не выбрано'), ('NM', 'Не женат'), ('MF', 'Есть подруга'), ('EN', 'Помолвлен'), ('MA', 'Женат'), ('CM', 'В гражданском браке'), ('LO', 'Влюблён'), ('DI', 'Всё сложно'), ('AS', 'В активном поиске')], default='NV', max_length=5, verbose_name='Статус мужчины')),
                ('female_status', models.CharField(choices=[('NV', 'Не выбрано'), ('NM', 'Не замужем'), ('MF', 'Есть друг'), ('EN', 'Помолвлена'), ('MA', 'Замужем'), ('CM', 'В гражданском браке'), ('LO', 'Влюблёна'), ('DI', 'Всё сложно'), ('AS', 'В активном поиске')], default='NV', max_length=5, verbose_name='Статус женщины')),
                ('dad', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_dad', to=settings.AUTH_USER_MODEL, verbose_name='Папа')),
                ('mom', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_mom', to=settings.AUTH_USER_MODEL, verbose_name='Мама')),
                ('partner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_partner', to=settings.AUTH_USER_MODEL, verbose_name='Муж/Жена')),
            ],
            options={
                'verbose_name': 'Семья пользователя',
                'verbose_name_plural': 'Семьи пользователей',
            },
        ),
        migrations.CreateModel(
            name='FeaturedUC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.PositiveIntegerField(default=0, verbose_name='Кто получает')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Рекомендуемый друг')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Рекомендуемое сообщество')),
                ('mute', models.BooleanField(default=False, verbose_name='Источник скрыт')),
                ('sleep', models.DateTimeField(blank=True, null=True, verbose_name='Не показывать до...')),
                ('list', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='users.listuc', verbose_name='Список')),
            ],
            options={
                'verbose_name': 'Источник рекомендаций',
                'verbose_name_plural': 'Источники рекомендаций',
                'constraints': [models.UniqueConstraint(fields=('owner', 'user', 'community'), name='feature_uc')],
            },
        ),
        migrations.CreateModel(
            name='NewsUC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.PositiveIntegerField(default=0, verbose_name='Кто получает')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Сообщество')),
                ('mute', models.BooleanField(default=False, verbose_name='Источник скрыт')),
                ('sleep', models.DateTimeField(blank=True, null=True, verbose_name='Не показывать до...')),
                ('list', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='users.listuc', verbose_name='Список')),
            ],
            options={
                'verbose_name': 'Источник новостей',
                'verbose_name_plural': 'Источники новостей',
                'constraints': [models.UniqueConstraint(fields=('owner', 'user', 'community'), name='news_uc')],
            },
        ),
        migrations.CreateModel(
            name='NotifyUC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.PositiveIntegerField(default=0, verbose_name='Кто получает')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Сообщество')),
                ('mute', models.BooleanField(default=False, verbose_name='Источник скрыт')),
                ('sleep', models.DateTimeField(blank=True, null=True, verbose_name='Не показывать до...')),
                ('list', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='users.listuc', verbose_name='Список')),
            ],
            options={
                'verbose_name': 'Источник уведомлений',
                'verbose_name_plural': 'Источники уведомлений',
                'constraints': [models.UniqueConstraint(fields=('owner', 'user', 'community'), name='notify_uc')],
            },
        ),
        migrations.CreateModel(
            name='UserBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked_user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL, verbose_name='Кого блокирует')),
                ('blocker', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_blocks', to=settings.AUTH_USER_MODEL, verbose_name='Кто блокирует')),
            ],
            options={
                'indexes': [models.Index(fields=['blocked_user', 'blocker'], name='users_userb_blocked_ab1a4e_idx')],
                'unique_together': {('blocked_user', 'blocker')},
            },
        ),
    ]
